# helm upgrade prometheus stable/prometheus-operator --install --namespace monitoring -f prometheus.yml

# https://github.com/helm/charts/blob/master/stable/prometheus-operator/values.yaml

fullnameOverride: prometheus

#### we have our own grafana instance
grafana:
  enabled: false

### following resources either controlled by GKE or absent
kubeDns:
  enabled: false
coreDns:
  enabled: false
kubeControllerManager:
  enabled: false
kubeEtcd:
  enabled: false
kubeScheduler:
  enabled: false

### do not create default rules - will load them manually using jsonnet
defaultRules:
  create: false

### settings for the alert manager
alertmanager:
  alertmanagerSpec:
    resources:
      requests:
        cpu: 10m
        memory: 64Mi

  config:
    templates:
      - "/etc/alertmanager/config/common.tmpl"
    global:
      resolve_timeout: 5m
      opsgenie_api_key: "????"
    route:
      ### default values
      group_by: ["alertname"]
      # How long to initially wait to send a notification for a group of alerts
      group_wait: 30s
      # How long to wait before sending a notification about new alerts that are added to a group
      group_interval: 5m
      # How long to wait before sending a notification again if it has already been sent successfully for an alert
      repeat_interval: 24h
      receiver: "opsgenie"
      ### additional routes
      routes:
        # test of missed metrics
        - match:
            group: absence-test
          group_by: ["group"]
          receiver: "opsgenie"
        # rule always firing so system is working
        - match:
            alertname: Watchdog
          receiver: "null"
    receivers:
      - name: "null"
      # https://docs.opsgenie.com/docs/heartbeat-api
      # avaiable only on paid plans starting from standart
      # - name: opsgenie-watchdog
      #   webhook_configs:
      #   - url: 'https://api.opsgenie.com/v2/heartbeats/HEARTBEAT_NAME/ping'
      #     send_resolved: true
      #     group_interval: 1m
      #     http_config:
      #       basic_auth:
      #         password: "???"
      - name: opsgenie
        opsgenie_configs:
          # - api_key: "????"
          - message: '{{`{{ template "opsgenie.makeomatic.message" . }}`}}'
            description: '{{`{{ template "opsgenie.makeomatic.description" . }}`}}'
            priority: '{{`{{ template "opsgenie.makeomatic.priority" . }}`}}'
            tags: '{{`{{ template "opsgenie.makeomatic.tags" . }}`}}'
            # source: '{{ template \"opsgenie.default.source\" . }}'
            # details: { <string>: <tmpl_string>, ... }
            # note: <tmpl_string>

  tplConfig: true
  templateFiles:
    common.tmpl: |-

      {{ define "opsgenie.makeomatic.priority" }}
        {{- if .CommonLabels.severity -}}
          {{- if eq .CommonLabels.severity "critical" -}}
              P1
          {{- else if eq .CommonLabels.severity "important" -}}
              P2
          {{- else if eq .CommonLabels.severity "warning" -}}
              P3
          {{- else if eq .CommonLabels.severity "information" -}}
              P4
          {{- else if eq .CommonLabels.severity "none" -}}
              P5
          {{- else -}}
              P5
          {{- end }}
        {{- else -}}
          P5
        {{- end }}
      {{- end -}}

      {{ define "opsgenie.makeomatic.description" }}
        {{- $root := . -}}
        {{ range .Alerts }}
          *Description:* {{ .Annotations.message }}
          *Runbook:* {{ .Annotations.runbook_url }}
          *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`{{ end }}

        {{ end }}
      {{- end }}

      {{ define "opsgenie.makeomatic.message" }}
        [{{ .CommonLabels.project }}-{{ .CommonLabels.environment }}] - {{ .GroupLabels.alertname }}@{{ .CommonLabels.product }}, {{ .CommonLabels.severity }}:{{ .Status }}
      {{- end -}}

      {{ define "opsgenie.makeomatic.tags" }}
        {{ .CommonLabels.product }}, {{ .CommonLabels.environment }}, {{ .CommonLabels.project }}
      {{- end -}}

prometheus:
  prometheusSpec:
    ruleSelector:
      matchExpressions:
        - key: app
          operator: Exists
    serviceMonitorSelector:
      matchExpressions:
        - key: app
          operator: Exists
    resources:
      requests:
        cpu: 10m
        memory: 1024Mi
      limits:
        memory: 1024Mi
prometheusOperator:
  resources:
    requests:
      cpu: 10m
      memory: 64Mi
    limits:
      memory: 64Mi
